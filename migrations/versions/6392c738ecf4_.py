"""empty message

Revision ID: 6392c738ecf4
Revises: 458a041f5c35
Create Date: 2025-06-13 18:08:32.897200

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '6392c738ecf4'
down_revision = '458a041f5c35'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, check if there are any valid superadminpanel IDs to use as default
    connection = op.get_bind()
    
    # Get the first available superadminpanel ID
    result = connection.execute(sa.text("SELECT id FROM superadminpanel LIMIT 1"))
    first_panel = result.fetchone()
    
    if first_panel:
        default_panel_id = first_panel[0]
        # Update NULL values with the first available superadminpanel ID
        connection.execute(
            sa.text("UPDATE announcement SET adminPanelId = :panel_id WHERE adminPanelId IS NULL"),
            {"panel_id": default_panel_id}
        )
    else:
        # If no superadminpanel exists, create a default one or handle the error
        # Option 1: Create a default superadminpanel (you'll need a valid superadmin_id)
        # Uncomment and modify the following lines if you want to create a default panel:
        
        # Check if there's a superadmin to reference
        superadmin_result = connection.execute(sa.text("SELECT id FROM superadmin LIMIT 1"))
        first_superadmin = superadmin_result.fetchone()
        
        if first_superadmin:
            superadmin_id = first_superadmin[0]
            # Create a default superadminpanel
            connection.execute(
                sa.text("INSERT INTO superadminpanel (superadmin_id) VALUES (:superadmin_id)"),
                {"superadmin_id": superadmin_id}
            )
            
            # Get the newly created panel ID
            new_panel_result = connection.execute(sa.text("SELECT LAST_INSERT_ID()"))
            new_panel_id = new_panel_result.fetchone()[0]
            
            # Update NULL values with the new panel ID
            connection.execute(
                sa.text("UPDATE announcement SET adminPanelId = :panel_id WHERE adminPanelId IS NULL"),
                {"panel_id": new_panel_id}
            )
        else:
            # If no superadmin exists either, you might want to handle this case
            # For now, we'll just delete rows with NULL adminPanelId
            connection.execute(sa.text("DELETE FROM announcement WHERE adminPanelId IS NULL"))
    
    # Now apply the NOT NULL constraint
    with op.batch_alter_table('announcement', schema=None) as batch_op:
        batch_op.alter_column('adminPanelId',
               existing_type=mysql.INTEGER(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('announcement', schema=None) as batch_op:
        batch_op.alter_column('adminPanelId',
               existing_type=mysql.INTEGER(),
               nullable=True)

    # ### end Alembic commands ###